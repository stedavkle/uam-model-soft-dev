/*
 * generated by Xtext 2.28.0
 */
package org.xtext.wizard.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.wizard.mydsl.services.MyDslGrammarAccess;
import wizard.ButtonClose;
import wizard.ButtonNavigate;
import wizard.ButtonReturn;
import wizard.ButtonShow;
import wizard.Checkbox;
import wizard.Label;
import wizard.Page;
import wizard.TextField;
import wizard.Wizard;
import wizard.WizardPackage;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WizardPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WizardPackage.BUTTON_CLOSE:
				sequence_ButtonClose(context, (ButtonClose) semanticObject); 
				return; 
			case WizardPackage.BUTTON_NAVIGATE:
				sequence_ButtonNavigate(context, (ButtonNavigate) semanticObject); 
				return; 
			case WizardPackage.BUTTON_RETURN:
				sequence_ButtonReturn(context, (ButtonReturn) semanticObject); 
				return; 
			case WizardPackage.BUTTON_SHOW:
				sequence_ButtonShow(context, (ButtonShow) semanticObject); 
				return; 
			case WizardPackage.CHECKBOX:
				sequence_Checkbox(context, (Checkbox) semanticObject); 
				return; 
			case WizardPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case WizardPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case WizardPackage.TEXT_FIELD:
				sequence_TextField(context, (TextField) semanticObject); 
				return; 
			case WizardPackage.WIZARD:
				sequence_Wizard(context, (Wizard) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Button returns ButtonClose
	 *     ButtonClose returns ButtonClose
	 *
	 * Constraint:
	 *     (wizard=[Wizard|EString] label=Label)
	 * </pre>
	 */
	protected void sequence_ButtonClose(ISerializationContext context, ButtonClose semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.BUTTON_CLOSE__WIZARD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.BUTTON_CLOSE__WIZARD));
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.BUTTON__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.BUTTON__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getButtonCloseAccess().getWizardWizardEStringParserRuleCall_2_0_1(), semanticObject.eGet(WizardPackage.Literals.BUTTON_CLOSE__WIZARD, false));
		feeder.accept(grammarAccess.getButtonCloseAccess().getLabelLabelParserRuleCall_4_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Button returns ButtonNavigate
	 *     ButtonNavigate returns ButtonNavigate
	 *
	 * Constraint:
	 *     (nextPage=[Page|EString] nextPageAlt=[Page|EString]? label=Label)
	 * </pre>
	 */
	protected void sequence_ButtonNavigate(ISerializationContext context, ButtonNavigate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Button returns ButtonReturn
	 *     ButtonReturn returns ButtonReturn
	 *
	 * Constraint:
	 *     (previousPage=[Page|EString] label=Label)
	 * </pre>
	 */
	protected void sequence_ButtonReturn(ISerializationContext context, ButtonReturn semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.BUTTON_RETURN__PREVIOUS_PAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.BUTTON_RETURN__PREVIOUS_PAGE));
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.BUTTON__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.BUTTON__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getButtonReturnAccess().getPreviousPagePageEStringParserRuleCall_2_0_1(), semanticObject.eGet(WizardPackage.Literals.BUTTON_RETURN__PREVIOUS_PAGE, false));
		feeder.accept(grammarAccess.getButtonReturnAccess().getLabelLabelParserRuleCall_4_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Button returns ButtonShow
	 *     ButtonShow returns ButtonShow
	 *
	 * Constraint:
	 *     (message=EString label=Label)
	 * </pre>
	 */
	protected void sequence_ButtonShow(ISerializationContext context, ButtonShow semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.BUTTON_SHOW__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.BUTTON_SHOW__MESSAGE));
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.BUTTON__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.BUTTON__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getButtonShowAccess().getMessageEStringParserRuleCall_2_0(), semanticObject.getMessage());
		feeder.accept(grammarAccess.getButtonShowAccess().getLabelLabelParserRuleCall_4_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Checkbox returns Checkbox
	 *
	 * Constraint:
	 *     (selected?='selected' label=Label)
	 * </pre>
	 */
	protected void sequence_Checkbox(ISerializationContext context, Checkbox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.CHECKBOX__SELECTED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.CHECKBOX__SELECTED));
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.CHECKBOX__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.CHECKBOX__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheckboxAccess().getSelectedSelectedKeyword_0_0(), semanticObject.isSelected());
		feeder.accept(grammarAccess.getCheckboxAccess().getLabelLabelParserRuleCall_3_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Label returns Label
	 *
	 * Constraint:
	 *     text=EString
	 * </pre>
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.LABEL__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.LABEL__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabelAccess().getTextEStringParserRuleCall_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Page returns Page
	 *
	 * Constraint:
	 *     (init?='init' (textfields+=TextField textfields+=TextField*)? checkbox=Checkbox? buttons+=Button buttons+=Button*)
	 * </pre>
	 */
	protected void sequence_Page(ISerializationContext context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TextField returns TextField
	 *
	 * Constraint:
	 *     (minLength=EInt maxLength=EInt input=EString? label=Label)
	 * </pre>
	 */
	protected void sequence_TextField(ISerializationContext context, TextField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Wizard returns Wizard
	 *
	 * Constraint:
	 *     (title=EString pages+=Page pages+=Page*)
	 * </pre>
	 */
	protected void sequence_Wizard(ISerializationContext context, Wizard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
