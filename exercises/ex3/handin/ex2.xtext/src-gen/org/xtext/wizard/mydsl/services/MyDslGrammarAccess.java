/*
 * generated by Xtext 2.28.0
 */
package org.xtext.wizard.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class WizardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.Wizard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWizardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTitleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEStringParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Keyword cPagesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPagesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPagesPageParserRuleCall_5_0 = (RuleCall)cPagesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPagesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPagesPageParserRuleCall_6_1_0 = (RuleCall)cPagesAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Wizard returns Wizard:
		//    'Wizard:'
		//    'title' title=EString
		//    'pages' '[' pages+=Page ( "," pages+=Page)* ']'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Wizard:'
		//'title' title=EString
		//'pages' '[' pages+=Page ( "," pages+=Page)* ']'
		public Group getGroup() { return cGroup; }
		
		//'Wizard:'
		public Keyword getWizardKeyword_0() { return cWizardKeyword_0; }
		
		//'title'
		public Keyword getTitleKeyword_1() { return cTitleKeyword_1; }
		
		//title=EString
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//EString
		public RuleCall getTitleEStringParserRuleCall_2_0() { return cTitleEStringParserRuleCall_2_0; }
		
		//'pages'
		public Keyword getPagesKeyword_3() { return cPagesKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//pages+=Page
		public Assignment getPagesAssignment_5() { return cPagesAssignment_5; }
		
		//Page
		public RuleCall getPagesPageParserRuleCall_5_0() { return cPagesPageParserRuleCall_5_0; }
		
		//( "," pages+=Page)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//pages+=Page
		public Assignment getPagesAssignment_6_1() { return cPagesAssignment_6_1; }
		
		//Page
		public RuleCall getPagesPageParserRuleCall_6_1_0() { return cPagesPageParserRuleCall_6_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.Button");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cButtonNavigateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonReturnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cButtonShowParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cButtonCloseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Button returns Button:
		//    ButtonNavigate | ButtonReturn | ButtonShow | ButtonClose;
		@Override public ParserRule getRule() { return rule; }
		
		//ButtonNavigate | ButtonReturn | ButtonShow | ButtonClose
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ButtonNavigate
		public RuleCall getButtonNavigateParserRuleCall_0() { return cButtonNavigateParserRuleCall_0; }
		
		//ButtonReturn
		public RuleCall getButtonReturnParserRuleCall_1() { return cButtonReturnParserRuleCall_1; }
		
		//ButtonShow
		public RuleCall getButtonShowParserRuleCall_2() { return cButtonShowParserRuleCall_2; }
		
		//ButtonClose
		public RuleCall getButtonCloseParserRuleCall_3() { return cButtonCloseParserRuleCall_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInitInitKeyword_0_0 = (Keyword)cInitAssignment_0.eContents().get(0);
		private final Keyword cPageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTextfieldsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTextfieldsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTextfieldsTextFieldParserRuleCall_2_2_0 = (RuleCall)cTextfieldsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cTextfieldsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cTextfieldsTextFieldParserRuleCall_2_3_1_0 = (RuleCall)cTextfieldsAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCheckboxKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCheckboxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCheckboxCheckboxParserRuleCall_3_1_0 = (RuleCall)cCheckboxAssignment_3_1.eContents().get(0);
		private final Keyword cButtonsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cButtonsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cButtonsButtonParserRuleCall_6_0 = (RuleCall)cButtonsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cButtonsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cButtonsButtonParserRuleCall_7_1_0 = (RuleCall)cButtonsAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Page returns Page:
		//    init?='init'
		//    'Page:'
		//    ('textfields' '[' textfields+=TextField ( "," textfields+=TextField)* ']' )?
		//    ('checkbox' checkbox=Checkbox)?
		//    'buttons' '[' buttons+=Button ( "," buttons+=Button)* ']'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//init?='init'
		//'Page:'
		//('textfields' '[' textfields+=TextField ( "," textfields+=TextField)* ']' )?
		//('checkbox' checkbox=Checkbox)?
		//'buttons' '[' buttons+=Button ( "," buttons+=Button)* ']'
		public Group getGroup() { return cGroup; }
		
		//init?='init'
		public Assignment getInitAssignment_0() { return cInitAssignment_0; }
		
		//'init'
		public Keyword getInitInitKeyword_0_0() { return cInitInitKeyword_0_0; }
		
		//'Page:'
		public Keyword getPageKeyword_1() { return cPageKeyword_1; }
		
		//('textfields' '[' textfields+=TextField ( "," textfields+=TextField)* ']' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'textfields'
		public Keyword getTextfieldsKeyword_2_0() { return cTextfieldsKeyword_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//textfields+=TextField
		public Assignment getTextfieldsAssignment_2_2() { return cTextfieldsAssignment_2_2; }
		
		//TextField
		public RuleCall getTextfieldsTextFieldParserRuleCall_2_2_0() { return cTextfieldsTextFieldParserRuleCall_2_2_0; }
		
		//( "," textfields+=TextField)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//textfields+=TextField
		public Assignment getTextfieldsAssignment_2_3_1() { return cTextfieldsAssignment_2_3_1; }
		
		//TextField
		public RuleCall getTextfieldsTextFieldParserRuleCall_2_3_1_0() { return cTextfieldsTextFieldParserRuleCall_2_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//('checkbox' checkbox=Checkbox)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'checkbox'
		public Keyword getCheckboxKeyword_3_0() { return cCheckboxKeyword_3_0; }
		
		//checkbox=Checkbox
		public Assignment getCheckboxAssignment_3_1() { return cCheckboxAssignment_3_1; }
		
		//Checkbox
		public RuleCall getCheckboxCheckboxParserRuleCall_3_1_0() { return cCheckboxCheckboxParserRuleCall_3_1_0; }
		
		//'buttons'
		public Keyword getButtonsKeyword_4() { return cButtonsKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//buttons+=Button
		public Assignment getButtonsAssignment_6() { return cButtonsAssignment_6; }
		
		//Button
		public RuleCall getButtonsButtonParserRuleCall_6_0() { return cButtonsButtonParserRuleCall_6_0; }
		
		//( "," buttons+=Button)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//buttons+=Button
		public Assignment getButtonsAssignment_7_1() { return cButtonsAssignment_7_1; }
		
		//Button
		public RuleCall getButtonsButtonParserRuleCall_7_1_0() { return cButtonsButtonParserRuleCall_7_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class TextFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.TextField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMinLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinLengthEIntParserRuleCall_2_0 = (RuleCall)cMinLengthAssignment_2.eContents().get(0);
		private final Keyword cMaxLengthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMaxLengthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMaxLengthEIntParserRuleCall_4_0 = (RuleCall)cMaxLengthAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInputKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInputAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInputEStringParserRuleCall_5_1_0 = (RuleCall)cInputAssignment_5_1.eContents().get(0);
		private final Keyword cLabelKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLabelAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLabelLabelParserRuleCall_7_0 = (RuleCall)cLabelAssignment_7.eContents().get(0);
		
		//TextField returns TextField:
		//    'TextField:'
		//    'minLength' minLength=EInt
		//    'maxLength' maxLength=EInt
		//    ('input' input=EString)?
		//    'label' label=Label
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'TextField:'
		//'minLength' minLength=EInt
		//'maxLength' maxLength=EInt
		//('input' input=EString)?
		//'label' label=Label
		public Group getGroup() { return cGroup; }
		
		//'TextField:'
		public Keyword getTextFieldKeyword_0() { return cTextFieldKeyword_0; }
		
		//'minLength'
		public Keyword getMinLengthKeyword_1() { return cMinLengthKeyword_1; }
		
		//minLength=EInt
		public Assignment getMinLengthAssignment_2() { return cMinLengthAssignment_2; }
		
		//EInt
		public RuleCall getMinLengthEIntParserRuleCall_2_0() { return cMinLengthEIntParserRuleCall_2_0; }
		
		//'maxLength'
		public Keyword getMaxLengthKeyword_3() { return cMaxLengthKeyword_3; }
		
		//maxLength=EInt
		public Assignment getMaxLengthAssignment_4() { return cMaxLengthAssignment_4; }
		
		//EInt
		public RuleCall getMaxLengthEIntParserRuleCall_4_0() { return cMaxLengthEIntParserRuleCall_4_0; }
		
		//('input' input=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'input'
		public Keyword getInputKeyword_5_0() { return cInputKeyword_5_0; }
		
		//input=EString
		public Assignment getInputAssignment_5_1() { return cInputAssignment_5_1; }
		
		//EString
		public RuleCall getInputEStringParserRuleCall_5_1_0() { return cInputEStringParserRuleCall_5_1_0; }
		
		//'label'
		public Keyword getLabelKeyword_6() { return cLabelKeyword_6; }
		
		//label=Label
		public Assignment getLabelAssignment_7() { return cLabelAssignment_7; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_7_0() { return cLabelLabelParserRuleCall_7_0; }
	}
	public class CheckboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.Checkbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSelectedSelectedKeyword_0_0 = (Keyword)cSelectedAssignment_0.eContents().get(0);
		private final Keyword cCheckboxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLabelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelLabelParserRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		
		//Checkbox returns Checkbox:
		//    selected?='selected'
		//    'Checkbox:'
		//    'label' label=Label
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//selected?='selected'
		//'Checkbox:'
		//'label' label=Label
		public Group getGroup() { return cGroup; }
		
		//selected?='selected'
		public Assignment getSelectedAssignment_0() { return cSelectedAssignment_0; }
		
		//'selected'
		public Keyword getSelectedSelectedKeyword_0_0() { return cSelectedSelectedKeyword_0_0; }
		
		//'Checkbox:'
		public Keyword getCheckboxKeyword_1() { return cCheckboxKeyword_1; }
		
		//'label'
		public Keyword getLabelKeyword_2() { return cLabelKeyword_2; }
		
		//label=Label
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_3_0() { return cLabelLabelParserRuleCall_3_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextEStringParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		//Label returns Label:
		//    'Label:'
		//    'text' text=EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Label:'
		//'text' text=EString
		public Group getGroup() { return cGroup; }
		
		//'Label:'
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//'text'
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//text=EString
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//EString
		public RuleCall getTextEStringParserRuleCall_2_0() { return cTextEStringParserRuleCall_2_0; }
	}
	public class ButtonNavigateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.ButtonNavigate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonNavigateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNextPageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNextPageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNextPagePageCrossReference_2_0 = (CrossReference)cNextPageAssignment_2.eContents().get(0);
		private final RuleCall cNextPagePageEStringParserRuleCall_2_0_1 = (RuleCall)cNextPagePageCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNextPageAltKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNextPageAltAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cNextPageAltPageCrossReference_3_1_0 = (CrossReference)cNextPageAltAssignment_3_1.eContents().get(0);
		private final RuleCall cNextPageAltPageEStringParserRuleCall_3_1_0_1 = (RuleCall)cNextPageAltPageCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLabelKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelLabelParserRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		
		//ButtonNavigate returns ButtonNavigate:
		//    'ButtonNavigate:'
		//    'nextPage' nextPage=[Page|EString]
		//    ('nextPageAlt' nextPageAlt=[Page|EString])?
		//    'label' label=Label
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ButtonNavigate:'
		//'nextPage' nextPage=[Page|EString]
		//('nextPageAlt' nextPageAlt=[Page|EString])?
		//'label' label=Label
		public Group getGroup() { return cGroup; }
		
		//'ButtonNavigate:'
		public Keyword getButtonNavigateKeyword_0() { return cButtonNavigateKeyword_0; }
		
		//'nextPage'
		public Keyword getNextPageKeyword_1() { return cNextPageKeyword_1; }
		
		//nextPage=[Page|EString]
		public Assignment getNextPageAssignment_2() { return cNextPageAssignment_2; }
		
		//[Page|EString]
		public CrossReference getNextPagePageCrossReference_2_0() { return cNextPagePageCrossReference_2_0; }
		
		//EString
		public RuleCall getNextPagePageEStringParserRuleCall_2_0_1() { return cNextPagePageEStringParserRuleCall_2_0_1; }
		
		//('nextPageAlt' nextPageAlt=[Page|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'nextPageAlt'
		public Keyword getNextPageAltKeyword_3_0() { return cNextPageAltKeyword_3_0; }
		
		//nextPageAlt=[Page|EString]
		public Assignment getNextPageAltAssignment_3_1() { return cNextPageAltAssignment_3_1; }
		
		//[Page|EString]
		public CrossReference getNextPageAltPageCrossReference_3_1_0() { return cNextPageAltPageCrossReference_3_1_0; }
		
		//EString
		public RuleCall getNextPageAltPageEStringParserRuleCall_3_1_0_1() { return cNextPageAltPageEStringParserRuleCall_3_1_0_1; }
		
		//'label'
		public Keyword getLabelKeyword_4() { return cLabelKeyword_4; }
		
		//label=Label
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_5_0() { return cLabelLabelParserRuleCall_5_0; }
	}
	public class ButtonReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.ButtonReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPreviousPageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPreviousPageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPreviousPagePageCrossReference_2_0 = (CrossReference)cPreviousPageAssignment_2.eContents().get(0);
		private final RuleCall cPreviousPagePageEStringParserRuleCall_2_0_1 = (RuleCall)cPreviousPagePageCrossReference_2_0.eContents().get(1);
		private final Keyword cLabelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelLabelParserRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		
		//ButtonReturn returns ButtonReturn:
		//    'ButtonReturn:'
		//    'previousPage' previousPage=[Page|EString]
		//    'label' label=Label
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ButtonReturn:'
		//'previousPage' previousPage=[Page|EString]
		//'label' label=Label
		public Group getGroup() { return cGroup; }
		
		//'ButtonReturn:'
		public Keyword getButtonReturnKeyword_0() { return cButtonReturnKeyword_0; }
		
		//'previousPage'
		public Keyword getPreviousPageKeyword_1() { return cPreviousPageKeyword_1; }
		
		//previousPage=[Page|EString]
		public Assignment getPreviousPageAssignment_2() { return cPreviousPageAssignment_2; }
		
		//[Page|EString]
		public CrossReference getPreviousPagePageCrossReference_2_0() { return cPreviousPagePageCrossReference_2_0; }
		
		//EString
		public RuleCall getPreviousPagePageEStringParserRuleCall_2_0_1() { return cPreviousPagePageEStringParserRuleCall_2_0_1; }
		
		//'label'
		public Keyword getLabelKeyword_3() { return cLabelKeyword_3; }
		
		//label=Label
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_4_0() { return cLabelLabelParserRuleCall_4_0; }
	}
	public class ButtonShowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.ButtonShow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonShowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMessageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageEStringParserRuleCall_2_0 = (RuleCall)cMessageAssignment_2.eContents().get(0);
		private final Keyword cLabelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelLabelParserRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		
		//ButtonShow returns ButtonShow:
		//    'ButtonShow:'
		//    'message' message=EString
		//    'label' label=Label
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ButtonShow:'
		//'message' message=EString
		//'label' label=Label
		public Group getGroup() { return cGroup; }
		
		//'ButtonShow:'
		public Keyword getButtonShowKeyword_0() { return cButtonShowKeyword_0; }
		
		//'message'
		public Keyword getMessageKeyword_1() { return cMessageKeyword_1; }
		
		//message=EString
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }
		
		//EString
		public RuleCall getMessageEStringParserRuleCall_2_0() { return cMessageEStringParserRuleCall_2_0; }
		
		//'label'
		public Keyword getLabelKeyword_3() { return cLabelKeyword_3; }
		
		//label=Label
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_4_0() { return cLabelLabelParserRuleCall_4_0; }
	}
	public class ButtonCloseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.wizard.mydsl.MyDsl.ButtonClose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonCloseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWizardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWizardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cWizardWizardCrossReference_2_0 = (CrossReference)cWizardAssignment_2.eContents().get(0);
		private final RuleCall cWizardWizardEStringParserRuleCall_2_0_1 = (RuleCall)cWizardWizardCrossReference_2_0.eContents().get(1);
		private final Keyword cLabelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelLabelParserRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		
		//ButtonClose returns ButtonClose:
		//    'ButtonClose:'
		//    'wizard' wizard=[Wizard|EString]
		//    'label' label=Label
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ButtonClose:'
		//'wizard' wizard=[Wizard|EString]
		//'label' label=Label
		public Group getGroup() { return cGroup; }
		
		//'ButtonClose:'
		public Keyword getButtonCloseKeyword_0() { return cButtonCloseKeyword_0; }
		
		//'wizard'
		public Keyword getWizardKeyword_1() { return cWizardKeyword_1; }
		
		//wizard=[Wizard|EString]
		public Assignment getWizardAssignment_2() { return cWizardAssignment_2; }
		
		//[Wizard|EString]
		public CrossReference getWizardWizardCrossReference_2_0() { return cWizardWizardCrossReference_2_0; }
		
		//EString
		public RuleCall getWizardWizardEStringParserRuleCall_2_0_1() { return cWizardWizardEStringParserRuleCall_2_0_1; }
		
		//'label'
		public Keyword getLabelKeyword_3() { return cLabelKeyword_3; }
		
		//label=Label
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_4_0() { return cLabelLabelParserRuleCall_4_0; }
	}
	
	
	private final WizardElements pWizard;
	private final ButtonElements pButton;
	private final EStringElements pEString;
	private final PageElements pPage;
	private final EBooleanElements pEBoolean;
	private final TextFieldElements pTextField;
	private final CheckboxElements pCheckbox;
	private final EIntElements pEInt;
	private final LabelElements pLabel;
	private final ButtonNavigateElements pButtonNavigate;
	private final ButtonReturnElements pButtonReturn;
	private final ButtonShowElements pButtonShow;
	private final ButtonCloseElements pButtonClose;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWizard = new WizardElements();
		this.pButton = new ButtonElements();
		this.pEString = new EStringElements();
		this.pPage = new PageElements();
		this.pEBoolean = new EBooleanElements();
		this.pTextField = new TextFieldElements();
		this.pCheckbox = new CheckboxElements();
		this.pEInt = new EIntElements();
		this.pLabel = new LabelElements();
		this.pButtonNavigate = new ButtonNavigateElements();
		this.pButtonReturn = new ButtonReturnElements();
		this.pButtonShow = new ButtonShowElements();
		this.pButtonClose = new ButtonCloseElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.wizard.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Wizard returns Wizard:
	//    'Wizard:'
	//    'title' title=EString
	//    'pages' '[' pages+=Page ( "," pages+=Page)* ']'
	//    ;
	public WizardElements getWizardAccess() {
		return pWizard;
	}
	
	public ParserRule getWizardRule() {
		return getWizardAccess().getRule();
	}
	
	//Button returns Button:
	//    ButtonNavigate | ButtonReturn | ButtonShow | ButtonClose;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Page returns Page:
	//    init?='init'
	//    'Page:'
	//    ('textfields' '[' textfields+=TextField ( "," textfields+=TextField)* ']' )?
	//    ('checkbox' checkbox=Checkbox)?
	//    'buttons' '[' buttons+=Button ( "," buttons+=Button)* ']'
	//    ;
	public PageElements getPageAccess() {
		return pPage;
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//TextField returns TextField:
	//    'TextField:'
	//    'minLength' minLength=EInt
	//    'maxLength' maxLength=EInt
	//    ('input' input=EString)?
	//    'label' label=Label
	//    ;
	public TextFieldElements getTextFieldAccess() {
		return pTextField;
	}
	
	public ParserRule getTextFieldRule() {
		return getTextFieldAccess().getRule();
	}
	
	//Checkbox returns Checkbox:
	//    selected?='selected'
	//    'Checkbox:'
	//    'label' label=Label
	//    ;
	public CheckboxElements getCheckboxAccess() {
		return pCheckbox;
	}
	
	public ParserRule getCheckboxRule() {
		return getCheckboxAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Label returns Label:
	//    'Label:'
	//    'text' text=EString
	//    ;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//ButtonNavigate returns ButtonNavigate:
	//    'ButtonNavigate:'
	//    'nextPage' nextPage=[Page|EString]
	//    ('nextPageAlt' nextPageAlt=[Page|EString])?
	//    'label' label=Label
	//    ;
	public ButtonNavigateElements getButtonNavigateAccess() {
		return pButtonNavigate;
	}
	
	public ParserRule getButtonNavigateRule() {
		return getButtonNavigateAccess().getRule();
	}
	
	//ButtonReturn returns ButtonReturn:
	//    'ButtonReturn:'
	//    'previousPage' previousPage=[Page|EString]
	//    'label' label=Label
	//    ;
	public ButtonReturnElements getButtonReturnAccess() {
		return pButtonReturn;
	}
	
	public ParserRule getButtonReturnRule() {
		return getButtonReturnAccess().getRule();
	}
	
	//ButtonShow returns ButtonShow:
	//    'ButtonShow:'
	//    'message' message=EString
	//    'label' label=Label
	//    ;
	public ButtonShowElements getButtonShowAccess() {
		return pButtonShow;
	}
	
	public ParserRule getButtonShowRule() {
		return getButtonShowAccess().getRule();
	}
	
	//ButtonClose returns ButtonClose:
	//    'ButtonClose:'
	//    'wizard' wizard=[Wizard|EString]
	//    'label' label=Label
	//    ;
	public ButtonCloseElements getButtonCloseAccess() {
		return pButtonClose;
	}
	
	public ParserRule getButtonCloseRule() {
		return getButtonCloseAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
